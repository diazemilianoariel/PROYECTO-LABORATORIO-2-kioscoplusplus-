Para lograr la funcionalidad que deseas en tu proyecto en C++ con programación orientada a objetos (POO), donde puedas realizar ventas, actualizar el stock de productos y mostrar facturas, aquí hay algunos pasos que puedes seguir y sugerencias:

1. Actualización de Stock en la Venta:
Actualizar Stock en Archivos:
Después de seleccionar los productos a vender, debes actualizar el stock de cada producto en tu archivo de productos. Puedes hacerlo en la misma función donde registras la venta.
2. Clase Venta y DetalleVenta:
Modificar la Clase Venta:

En tu clase Venta, podrías incluir una lista (o array) de DetalleVenta para almacenar los detalles de la venta. Cada DetalleVenta tendría información sobre el producto vendido, la cantidad, el precio unitario, etc.
Modificar la Clase DetalleVenta:

Asegúrate de que la clase Detalleventa tenga métodos para calcular el precio total del detalle y para mostrar los detalles de la venta.
3. Actualización de Archivos:
Actualizar Archivo de Ventas:
Cuando registras una venta, actualiza tu archivo de ventas con la nueva venta, incluyendo todos los detalles.
4. Mostrar Factura:
Mostrar Factura en la Venta:
Después de realizar la venta, puedes mostrar una factura que incluya los detalles de la venta, el subtotal y el total final. Puedes usar la información de la venta y sus detalles.
5. Integración en Menú Venta:
Modificar la Función agregarVenta():
Después de cargar la venta, puedes pedir los detalles de cada producto vendido y actualizar el stock. Además, puedes mostrar la factura.
6. Actualización de la Función menuVenta():
Integrar Actualizaciones de Stock:

Asegúrate de llamar a las funciones necesarias para actualizar el stock en el menú de ventas.
Integrar Mostrar Factura:

Después de realizar una venta, muestra la factura.
7. Pruebas:
Prueba el Flujo de Ventas:
Realiza pruebas para asegurarte de que el flujo de ventas, actualización de stock y visualización de facturas funcione correctamente.
Observaciones Finales:
Persistencia de Datos:

Asegúrate de manejar correctamente la persistencia de datos, es decir, que los cambios en los productos y las ventas se guarden correctamente en los archivos.
Manejo de Errores:

Implementa manejo de errores y validaciones en la entrada del usuario para garantizar un comportamiento seguro y prevenir problemas.
Este es un enfoque general y puedes ajustarlo según la estructura y necesidades específicas de tu proyecto. Si tienes preguntas específicas o necesitas más ayuda con una parte en particular, no dudes en preguntar. ¡Buena suerte con tu proyecto!